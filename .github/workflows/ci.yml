name: CI (Angular) -> Docker Hub

on:
  push:
    branches: [ "main" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/test-app

jobs:
  # 1) UNIT TESTS (runs in parallel with e2e_tests)
  unit_tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      - name: Run unit tests (JUnit + coverage)
        env:
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          set -o pipefail
          mkdir -p reports/junit reports/coverage
          npm run test:ci | tee reports/unit-tests.log

      - name: Publish JUnit summary (always)
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: reports/junit/**/*.xml
          check_name: "Unit Test Report"
          fail_on_failure: true

      - name: Upload unit artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-artifacts-${{ github.run_number }}-${{ github.sha }}
          path: |
            reports/junit/**
            reports/coverage/**
            reports/unit-tests.log
          if-no-files-found: ignore
          retention-days: 30

  # 2) E2E TESTS (runs in parallel with unit_tests)
  e2e_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - run: npm run build -- --configuration=production

      - name: Pick dist root
        run: |
          if [ -f dist/test-app/index.html ]; then
            echo "DIST_ROOT=dist/test-app" >> $GITHUB_ENV
          elif [ -f dist/test-app/browser/index.html ]; then
            echo "DIST_ROOT=dist/test-app/browser" >> $GITHUB_ENV
          else
            echo "No index.html found under dist/"; exit 1
          fi
          echo "Chosen DIST_ROOT=$DIST_ROOT"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      - name: Serve dist for E2E
        run: npx http-server "$DIST_ROOT" -p 8080 -a 127.0.0.1 -s >/dev/null 2>&1 &

      - name: Wait for server
        run: |
          npx wait-on tcp:127.0.0.1:8080 --timeout 180000
          curl -I http://127.0.0.1:8080 || true

      - name: Run Cypress (JUnit + videos)
        env:
          CYPRESS_BROWSER_PATH: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          set -o pipefail
          mkdir -p reports/cypress-junit
          npx cypress run --browser chrome --headless \
            --reporter junit \
            --reporter-options "mochaFile=reports/cypress-junit/results-[hash].xml,toConsole=false" \
            --config baseUrl=http://127.0.0.1:8080,retries=2,defaultCommandTimeout=20000 | tee reports/cypress.log

      - name: Upload e2e artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-${{ github.run_number }}-${{ github.sha }}
          path: |
            reports/cypress-junit/**
            reports/cypress.log
            cypress/screenshots/**
            cypress/videos/**
          if-no-files-found: ignore
          retention-days: 30

  # 3) GATE (single place to fail the workflow if any tests failed)
  gate:
    needs: [unit_tests, e2e_tests]
    runs-on: ubuntu-latest
    if: always()  # always run to evaluate results
    steps:
      - name: Ensure both test suites passed
        run: |
          echo "unit_tests: ${{ needs.unit_tests.result }}"
          echo "e2e_tests : ${{ needs.e2e_tests.result }}"
          if [ "${{ needs.unit_tests.result }}" != "success" ] || [ "${{ needs.e2e_tests.result }}" != "success" ]; then
            echo "❌ One or more test jobs failed. Stopping pipeline."
            exit 1
          fi
          echo "✅ Both test jobs passed. Proceed."

  # 4) BUILD & PUSH (only runs if gate passed)
  build_push:
    needs: [gate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          tags: |
            type=sha
            type=raw,value=latest
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 5) PRUNE ARTIFACTS (keep latest 7 runs on main)
  prune_old_artifacts:
    needs: [unit_tests, e2e_tests, build_push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      actions: write
    steps:
      - name: Prune artifacts, keep last 7 runs of this workflow on main
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const wfName = context.workflow;
            const branch = 'main';
            const allRuns = await github.paginate(
              github.rest.actions.listWorkflowRunsForRepo,
              { owner, repo, branch, status: 'completed', per_page: 100 }
            );
            const runs = allRuns.filter(r => r.name === wfName);
            const keep = 7;
            const old = runs.slice(keep);
            for (const run of old) {
              const arts = await github.paginate(
                github.rest.actions.listWorkflowRunArtifacts,
                { owner, repo, run_id: run.id, per_page: 100 }
              );
              for (const a of arts) {
                await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: a.id });
                core.info(`Deleted artifact ${a.name} from run #${run.run_number}`);
              }
            }
