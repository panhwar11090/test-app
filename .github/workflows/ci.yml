name: CI (Angular) â†’ Docker Hub

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/test-app

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Node setup & tests ---
      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      # Runs tests, captures console log, and still fails job on test failure
      - name: Run unit tests (CI gate)
        env:
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          set -o pipefail
          mkdir -p reports/junit reports/coverage
          npm run test:ci | tee reports/unit-tests.log

      # --- Always publish test artifacts (even on failure) ---
      - name: Upload JUnit report (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/junit/test-results.xml
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload coverage HTML (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: reports/coverage
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload unit test console log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-console
          path: reports/unit-tests.log
          if-no-files-found: ignore
          retention-days: 14

      # Pretty summary in the Checks tab
      - name: Publish JUnit summary (always)
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: reports/junit/test-results.xml
          check_name: "Unit Test Report"
          fail_on_failure: true

            # ----- E2E against the built app (black-box) -----
      - name: Build Angular (prod) for E2E
        if: success()
        run: npm run build -- --configuration=production

      - name: Setup Chrome for Cypress
        if: success()
        id: chrome_e2e
        uses: browser-actions/setup-chrome@v1

      - name: Serve dist for E2E
        if: success()
        run: npx http-server dist/test-app -p 8080 -s &

      - name: Run Cypress E2E
        if: success()
        env:
          CHROME_BIN: ${{ steps.chrome_e2e.outputs.chrome-path }}
          CYPRESS_baseUrl: http://localhost:8080
        run: npx cypress run --browser chrome --headless

      - name: Upload Cypress artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/screenshots
            cypress/videos
          if-no-files-found: ignore
          retention-days: 14

      # --- Docker build & push (only if tests succeeded) ---
      - name: Set up Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        if: success()
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          tags: |
            type=sha
            type=raw,value=latest

      - name: Build and push
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
